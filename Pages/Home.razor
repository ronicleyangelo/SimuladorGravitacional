@page "/"
@inject ProgramacaoAvancada.Services.SimuladorService Simulacao
@implements IDisposable
@inject IJSRuntime JS

<PageTitle>Simulador - Blazor WASM</PageTitle>
@* 
<div class="sim-container">
    <div class="canvas-wrap">
        <svg @ref="svgElement" width="@Simulacao.CanvasWidth" height="@Simulacao.CanvasHeight"
             style="background-color: #0a0c25;">
            @foreach (var corpo in Simulacao.Corpos)
            {
                <circle cx="@corpo.PosX.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                        cy="@corpo.PosY.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                        r="@corpo.Raio.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                        fill="@corpo.Cor" opacity="0.8" />
            }

            <text x="10" y="20" fill="#a0a0ff" font-size="12px" font-family="Arial">
                Corpos: @Simulacao.Corpos.Count | Iterações: @Simulacao.Iteracoes |
                Colisões: @Simulacao.Colisoes | FPS: @fps
            </text>
        </svg>
    </div>

    <div class="controls">
        <div>
            <button @onclick="Iniciar" disabled="@Simulacao.Rodando">Iniciar</button>
            <button @onclick="Parar" disabled="@( !Simulacao.Rodando )">Parar</button>
            <button @onclick="Resetar"> Resetar</button>
        </div>


        <div>
            <label>Número de corpos</label>
            <input type="number" min="1" max="60" @bind="Simulacao.NumCorpos" @bind:after="OnNumCorposChanged" />
        </div>
    </div>
</div> *@

<PageTitle>Simulador - Blazor WASM</PageTitle>

<div class="sim-container">
    <div class="canvas-wrap">
        <svg @ref="svgElement" class="sim-canvas"
             width="@Simulacao.CanvasWidth"
             height="@Simulacao.CanvasHeight"
             style="background-color: #0a0c25;">
            @foreach (var corpo in Simulacao.Corpos)
            {
                <circle cx="@corpo.PosX.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                        cy="@corpo.PosY.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                        r="@corpo.Raio.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                        fill="@corpo.Cor" opacity="0.8" />
            }

            <text x="10" y="20" class="stats-text">
                Corpos: @Simulacao.Corpos.Count | Iterações: @Simulacao.Iteracoes |
                Colisões: @Simulacao.Colisoes | FPS: @fps
            </text>
        </svg>
    </div>

    <div class="controls">
        <div class="buttons">
            <button @onclick="Iniciar" disabled="@Simulacao.Rodando">Iniciar</button>
            <button @onclick="Parar" disabled="@( !Simulacao.Rodando )">Parar</button>
            <button @onclick="Resetar"> Resetar</button>
        </div>

        <div class="inputs">
            <label>Número de corpos</label>
            <input type="number" min="1" max="60" @bind="Simulacao.NumCorpos" @bind:after="OnNumCorposChanged" />
        </div>
    </div>
</div>


@code {
    private ElementReference svgElement;
    private System.Timers.Timer? loop;
    private long lastTimestamp = 0;
    private int fps = 0;
    private string arquivoNome = "universo.json";
    private const double deltaTime = 0.016; // 16 ms

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var w = await JS.InvokeAsync<int>("eval", "document.querySelector('.canvas-wrap').clientWidth");
            var h = Math.Min((int)(await JS.InvokeAsync<int>("eval", "window.innerHeight") * 0.5), 600);
            Simulacao.CanvasWidth = w;
            Simulacao.CanvasHeight = h;

            loop = new System.Timers.Timer(16);
            loop.Elapsed += async (_, __) =>
            {
                Simulacao.Atualizar(deltaTime); // passa deltaTime
                await InvokeAsync(StateHasChanged);
            };
            loop.AutoReset = true;
            loop.Start();
        }
    }

    private void OnNumCorposChanged()
    {
        Simulacao.Resetar();
    }

    void Iniciar() => Simulacao.Iniciar();
    void Parar() => Simulacao.Parar();
    void Resetar()
    {
        Simulacao.NumCorpos = Math.Max(1, Simulacao.NumCorpos);
        Simulacao.Resetar();
    }

    public void Dispose()
    {
        loop?.Stop();
        loop?.Dispose();
    }
}
